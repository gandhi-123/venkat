POINTER CONCEPT

Advantages of function pointer
   1. Function pointer can be passes as an argument and also can be returned from function. Thus code redundancy 
      can be avoided
   2. two or more functions having same argument type can be assigned to the function pointer.
   3. Instead of referring to data values, a function pointer points to executable code within memory.
   
Funtion pointer with parameter:
    void fun(int a)
    {
        printf("Value of a is %d\n", a);
    }
     
    int main()
    {
        // fun_ptr is a pointer to function fun() 
        void (*fun_ptr)(int) = &fun;
     
        /* The above line is equivalent of following two
           void (*fun_ptr)(int);
           fun_ptr = &fun; 
        */
     
        // Invoking fun() using fun_ptr
        (*fun_ptr)(10);
     
        return 0;
    }
    
Array of Function Pointers:
    #include <stdio.h>
    void add(int a, int b)
    {
        printf("Addition is %d\n", a+b);
    }
    void subtract(int a, int b)
    {
        printf("Subtraction is %d\n", a-b);
    }
    void multiply(int a, int b)
    {
        printf("Multiplication is %d\n", a*b);
    }
     
    int main()
    {
        // fun_ptr_arr is an array of function pointers
        void (*fun_ptr_arr[])(int, int) = {add, subtract, multiply};
        unsigned int ch, a = 15, b = 10;
     
        printf("Enter Choice: 0 for add, 1 for subtract and 2 "
                "for multiply\n");
        scanf("%d", &ch);
     
        if (ch > 2) return 0;
     
        (*fun_ptr_arr[ch])(a, b);
     
        return 0;
    }
    
Passing function pointer as parameter/argument:
    // A simple C program to show function pointers as parameter
    #include <stdio.h>
     
    // Two simple functions
    void fun1() { printf("Fun1\n"); }
    void fun2() { printf("Fun2\n"); }
     
    // A function that receives a simple function
    // as parameter and calls the function
    void wrapper(void (*fun)())
    {
        fun();
    }
     
    int main()
    {
        wrapper(fun1);
        wrapper(fun2);
        return 0;
    }
    
