**********************
Process memory layout
**********************
A process is logically divided into the following parts, known as segments:
􀁺 Text: the instructions of the program.
􀁺 Data: the static variables used by the program.
􀁺 Heap: an area from which programs can dynamically allocate extra memory.
􀁺 Stack: a piece of memory that grows and shrinks as functions are called and
return and that is used to allocate storage for local variables and function call
linkage information.

****************************
SYMBOLIC LINK
****************************
1.  Creating a Symbolic Link
    ln -s <src PATH> <Link PATH>
    
    ln -s sedtest.txt /home/venkat/venkat/sedtest.txt

2.  Unlink the Symbolic Link
    rm <link name>
    or
    unlink <linked file name>
    
3.  whether after unlink linked file the main source will deleted?
    No, only the linked file will be removed.
    
****************************
Static & Shared Libraries
****************************    
STATIC LIBRARY:
    A static library is essentially a structured bundle of compiled object modules. 
To use functions from a static library, we specify that library in the link command used to build a program. 
After resolving the various function references from the main program to the modules in the static library, the linker
extracts copies of the required object modules from the library and copies these into the resulting executable file. 
We say that such a program is statically linked.
    
    Disadvantage:
        1. The fact that each statically linked program includes its own copy of the object modules.
        2. The duplication of object code in different executable files wastes disk space.
        3. Waste of memory occurs when statically linked programs using the same library function which
           are executing at the same time; 
           each program requires its own copy of the function to reside in memory
        4. If user performed some modification on library function, then recompiled function of static library has to be 
           relinked with all the application which uses the static library.

SHARED LIBRARY:
    If a program is linked against a shared library:
    
    1. Instead of copying object modules from the library into the executable, 
       the linker just writes a record into the executable which indicates at run time to use the shared library.
    2. When the executable is loaded into memory at run time:
	   The dynamic linker ensures that the shared libraries is required for the executable.
       Performs run-time linking to resolve the function calls initiated from executable which is defined in the 
       shared library.
    3. At run time, only a single copy of shared library will be available in the memory
       and other running programs can use that copy of memory.
    
************************************************
Inter Process Communication
************************************************
signals		: which are used to indicate that an event has occurred;

pipes		: which can be used to transfer data between processes;

sockets		: which can be used to transfer data from one process to another, either
		  on the same host computer or on different hosts connected by a network;

file locking	: which allows a process to lock regions of a file in order to prevent
		  other processes from reading or updating the file contents;

message queues	: which are used to exchange messages (packets of data) between processes;

semaphores	: which are used to synchronize the actions of processes; 

shared memory	: which allows two or more processes to share a piece of memory.
		  When one process changes the contents of the shared memory, all of the other
		  processes can immediately see the changes.

*******************************
*       FILE LOCKING          *
*******************************
Problem of mixing LOCKING & STDIO functions:
	1. The problem is that an input buffer might be filled before a lock is placed
	2. output buffer may be flushed after a lock is removed.
	
		How to avoid the above problem?
			1. Perform file I/O using read() and write() instead of the stdio library.
			2. Flush the stdio stream before and after the file lock & releaseing the file lock respectively.

File lock functions used:
	1. flock(int fd,int operation);
              fd = file discriptor
              operation:
                LOCK_SH	: Place a shared lock on the file referred to by fd
                LOCK_EX	: Place an exclusive lock on the file referred to by fd
                LOCK_UN	: Unlock the file referred to by fd
                LOCK_NB	: Make a nonblocking lock request
								
	2. fcntl(int fd, int cmd, struct flock *lock);
              fd = file discriptor
              struct flock 
              {
                short l_type;    /* Type of lock: F_RDLCK,F_WRLCK, F_UNLCK */
                short l_whence;  /* How to interpret l_start: SEEK_SET, SEEK_CUR, SEEK_END */
                off_t l_start;   /* Starting offset for lock */
                off_t l_len;     /* Number of bytes to lock */
                pid_t l_pid;     /* PID of process blocking our lock (F_GETLK only) */
              };							
              cmd = operations
                F_SETLK :
                    Acquire a lock or release a lock based on the flock structure variable 
                    l_type(F_RDLCK,F_WRLCK, F_UNLCK).
												
                    It checks bytes specified by the l_whence,l_start, and l_len fields of flock structure 
                    of one process is conflicting with other. If conflicted it returns -1
                F_SETLKW :
                    This is same as F_SETLK, if particular region of lock is conflicted by another process then
                    process waits until the other process releases the lock.
                F_GETLK :
                    It checks whether lock can be placed to particular portion.
                    if lock can be placed it will return l_type as F_UNLCK.
												
                    if one or more incompatine locks prevents the current process to create a lock on that region
                    then it returns details of those locks in the flock structure with pid(which process is holding)
							
Comparing flock() & fcntl():
1. semantically macros for locking used by flock & fcntl lock are same.
		F_RDLCK = LOCK_SH (read lock macro of fcntl has same functionality of shared_lock of flock)
		F_WRLCK = LOCK_EX (write lock macro of fcntl has same functionality of exclusive_lock of flock)
		F_UNLCK = LOCK_UN (unlocking the file discriptor)

2. in the function fcntl(),
			we can place one or more locks on any part of the file ranging from single byte to entire file.
	 in flock(),
	 		Lock can be appiled only for whole file.


 		
 		

										
