***********************
*How to create process*
***********************
1. The process are created using fork().
2. only a process can create another process.
3. Generally "INIT" & "[kthread]"has the process ID 1 & 2 respectively and parent process Id as 0. These two process created by
   kernal at boot time.
   INIT:
      Which is responsible for starting & shutting down the machine.
   Kthread:
      In modern system some processes execute the kernal code and managed on user space.
      Theses processes are "spawnned" by kthread (which is INIT for kernal threads). 
      All kernal processes are denotes with [] brackets, this can be viewed using process listing "ps".      
4. process having PID = 0 is swapper, which is responsible for pagging and part of kernal operation.
5. SPAWNNING:
      Performs both fork() & exec() is called spawnning.

*********************************************************************************
*                           BASIC program using fork                            *
*********************************************************************************
#include<stdio.h>
#include<unistd.h>

int main()
{
	int RC;
	printf("starting the parent process\n");
  
  /*getpid : fetches the process id*/
  /*getppid : fetches the parent process id*/
  
	printf("parent pid = %d\n", getpid());
	RC = fork();
  
  /* If child is created successfully fork returns a value 0 */
  /* with the return value parent & child can be distinguished */
  
  if (RC == 0)
  {
    printf("entered into the child process: %d\n",getpid());
  }
	else
		printf("re-entered to parent pid: %d\n",getpid());
}

*********************************************************************************
*                           Explanation of above code                           *
*********************************************************************************

Parent Process                                      Child process
****************************                        ****************************
|........                  | it creates the process |........                  |
|........                  | same as it is with     |........                  |
|........                  | PC, STACK segment,     |........                  |
|fork() /*fork initiated*/ | text,heap, data as it  |fork()                    | instruction starts from next line
|........                  | is.                    |........                  | child start executing from this line  
|........                  | when fork is executes  |........                  |
|........                  | child will be created  |........                  |
**************************** with next instruction  ****************************
                             of code.
                             
Note: 
1. Address of Parent & Child process will be different

*********************************************************************************
*           What happens when exec is used in child                             *
*********************************************************************************
#include<stdio.h>
#include<unistd.h>
#include<sys/wait.h>

int main()
{
	int RC,a=10,b,c;
	int status = 0;
	printf("I am in the parent PID = %d\n",getpid());
	RC = fork();
	if (RC == 0) {
		printf("i am the child PID = %d\n",getpid());
		c = 5 * 2;
		printf("c child = %d\n",c);
		
		/* the child process calling exec */
		/* if exec executes sucessfully the control wont be returned back to child */
		
		execl("/bin/ls", "-l","-h",NULL);
		
		/* if exec command fails control returns to child */
		
		printf("after exec in child\n");
	} else {
		//wait(&status);
		printf("I am in the parent after fork PID = %d\n",getpid());
		printf("the value of c in parent = %d\n",c);
		b = a + c;
		printf("the value of b in parent = %d\n",b);
		wait(&status);
	}
}                             
                             
OUTPUT:
I am in the parent PID = 3255
I am in the parent after fork PID = 3255
the value of c in parent = 169703760
the value of b in parent = 169703770
i am the child PID = 3256
c child = 10

/*exec command executed sucessfully n printed the file listing*/

arr_sum.c    filemap.c	 fork_test1.c  fork_test.c     int2str.c       lsd_cmd.c	sparse_array.c	  triplet.c
cre_write.c  fork_test	 fork_test2    frac.c	       leftrotation.c  mag_diff.c	star.c
filemap1.c   fork_test1  fork_test2.c  hourglasssum.c  ls_cmd.c        reverse_array.c	timeconversion.c

/* Note: print statement "after exec in child" not printed */
